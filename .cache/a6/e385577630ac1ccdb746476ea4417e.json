{"id":"ui/meanLabel.js","dependencies":[{"name":"/Users/cfulsong/Documents/GitHub.nosync/MA_demo/package.json","includedInParent":true,"mtime":1631388643974},{"name":"phaser","loc":{"line":1,"column":19},"parent":"/Users/cfulsong/Documents/GitHub.nosync/MA_demo/src/ui/meanLabel.js","resolved":"/Users/cfulsong/Documents/GitHub.nosync/MA_demo/node_modules/phaser/dist/phaser.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _phaser = _interopRequireDefault(require(\"phaser\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar meanFormat = function meanFormat(mean) {\n  return \"Mean: \".concat(mean);\n};\n\nvar meanLabel = /*#__PURE__*/function (_Phaser$GameObjects$T) {\n  _inherits(meanLabel, _Phaser$GameObjects$T);\n\n  var _super = _createSuper(meanLabel);\n\n  function meanLabel(scene, x, y, mean, style) {\n    var _this;\n\n    _classCallCheck(this, meanLabel);\n\n    _this = _super.call(this, scene, x, y, mean, style);\n    _this.mean = mean;\n    return _this;\n  } //Update mean value\n\n\n  _createClass(meanLabel, [{\n    key: \"updateMean\",\n    value: function updateMean(mean) {\n      this.setText(meanFormat(mean));\n    }\n  }]);\n\n  return meanLabel;\n}(_phaser.default.GameObjects.Text);\n/** \n * Because this extends the text class, I can only have six arguments. \n * Meaning, I need to calculate the mean value outside of this class\n * and then feed the value into here to dispaly/update the text onscreen.\n*/\n\n\nexports.default = meanLabel;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"ui/meanLabel.js","original":{"line":1,"column":0}},{"generated":{"line":34,"column":0},"source":"ui/meanLabel.js","original":{"line":3,"column":0}},{"name":"meanFormat","generated":{"line":34,"column":4},"source":"ui/meanLabel.js","original":{"line":3,"column":6}},{"generated":{"line":34,"column":14},"source":"ui/meanLabel.js","original":{"line":3,"column":16}},{"generated":{"line":34,"column":17},"source":"ui/meanLabel.js","original":{"line":3,"column":19}},{"name":"meanFormat","generated":{"line":34,"column":26},"source":"ui/meanLabel.js","original":{"line":3,"column":6}},{"generated":{"line":34,"column":36},"source":"ui/meanLabel.js","original":{"line":3,"column":19}},{"name":"mean","generated":{"line":34,"column":37},"source":"ui/meanLabel.js","original":{"line":3,"column":20}},{"generated":{"line":34,"column":41},"source":"ui/meanLabel.js","original":{"line":3,"column":19}},{"generated":{"line":35,"column":0},"source":"ui/meanLabel.js","original":{"line":3,"column":19}},{"name":"mean","generated":{"line":35,"column":25},"source":"ui/meanLabel.js","original":{"line":3,"column":38}},{"generated":{"line":35,"column":29},"source":"ui/meanLabel.js","original":{"line":3,"column":19}},{"generated":{"line":36,"column":0},"source":"ui/meanLabel.js","original":{"line":3,"column":19}},{"generated":{"line":36,"column":1},"source":"ui/meanLabel.js","original":{"line":3,"column":0}},{"name":"meanLabel","generated":{"line":38,"column":4},"source":"ui/meanLabel.js","original":{"line":5,"column":21}},{"generated":{"line":43,"column":0},"source":"ui/meanLabel.js","original":{"line":6,"column":4}},{"name":"scene","generated":{"line":43,"column":21},"source":"ui/meanLabel.js","original":{"line":6,"column":16}},{"generated":{"line":43,"column":26},"source":"ui/meanLabel.js","original":{"line":6,"column":4}},{"name":"x","generated":{"line":43,"column":28},"source":"ui/meanLabel.js","original":{"line":6,"column":23}},{"generated":{"line":43,"column":29},"source":"ui/meanLabel.js","original":{"line":6,"column":4}},{"name":"y","generated":{"line":43,"column":31},"source":"ui/meanLabel.js","original":{"line":6,"column":26}},{"generated":{"line":43,"column":32},"source":"ui/meanLabel.js","original":{"line":6,"column":4}},{"name":"mean","generated":{"line":43,"column":34},"source":"ui/meanLabel.js","original":{"line":6,"column":29}},{"generated":{"line":43,"column":38},"source":"ui/meanLabel.js","original":{"line":6,"column":4}},{"name":"style","generated":{"line":43,"column":40},"source":"ui/meanLabel.js","original":{"line":6,"column":35}},{"generated":{"line":43,"column":45},"source":"ui/meanLabel.js","original":{"line":6,"column":4}},{"generated":{"line":43,"column":47},"source":"ui/meanLabel.js","original":{"line":6,"column":41}},{"generated":{"line":44,"column":0},"source":"ui/meanLabel.js","original":{"line":6,"column":41}},{"generated":{"line":46,"column":0},"source":"ui/meanLabel.js","original":{"line":6,"column":41}},{"generated":{"line":48,"column":0},"source":"ui/meanLabel.js","original":{"line":7,"column":8}},{"name":"scene","generated":{"line":48,"column":30},"source":"ui/meanLabel.js","original":{"line":7,"column":14}},{"generated":{"line":48,"column":35},"source":"ui/meanLabel.js","original":{"line":7,"column":8}},{"name":"x","generated":{"line":48,"column":37},"source":"ui/meanLabel.js","original":{"line":7,"column":21}},{"generated":{"line":48,"column":38},"source":"ui/meanLabel.js","original":{"line":7,"column":8}},{"name":"y","generated":{"line":48,"column":40},"source":"ui/meanLabel.js","original":{"line":7,"column":24}},{"generated":{"line":48,"column":41},"source":"ui/meanLabel.js","original":{"line":7,"column":8}},{"name":"mean","generated":{"line":48,"column":43},"source":"ui/meanLabel.js","original":{"line":7,"column":27}},{"generated":{"line":48,"column":47},"source":"ui/meanLabel.js","original":{"line":7,"column":8}},{"name":"style","generated":{"line":48,"column":49},"source":"ui/meanLabel.js","original":{"line":7,"column":33}},{"generated":{"line":48,"column":54},"source":"ui/meanLabel.js","original":{"line":7,"column":8}},{"generated":{"line":49,"column":0},"source":"ui/meanLabel.js","original":{"line":8,"column":8}},{"name":"mean","generated":{"line":49,"column":10},"source":"ui/meanLabel.js","original":{"line":8,"column":13}},{"generated":{"line":49,"column":14},"source":"ui/meanLabel.js","original":{"line":8,"column":8}},{"name":"mean","generated":{"line":49,"column":17},"source":"ui/meanLabel.js","original":{"line":8,"column":20}},{"generated":{"line":49,"column":21},"source":"ui/meanLabel.js","original":{"line":8,"column":8}},{"generated":{"line":50,"column":0},"source":"ui/meanLabel.js","original":{"line":6,"column":41}},{"generated":{"line":51,"column":0},"source":"ui/meanLabel.js","original":{"line":9,"column":5}},{"generated":{"line":51,"column":4},"source":"ui/meanLabel.js","original":{"line":11,"column":4}},{"generated":{"line":56,"column":11},"source":"ui/meanLabel.js","original":{"line":12,"column":4}},{"name":"mean","generated":{"line":56,"column":31},"source":"ui/meanLabel.js","original":{"line":12,"column":15}},{"generated":{"line":56,"column":35},"source":"ui/meanLabel.js","original":{"line":12,"column":4}},{"generated":{"line":56,"column":37},"source":"ui/meanLabel.js","original":{"line":12,"column":20}},{"generated":{"line":57,"column":0},"source":"ui/meanLabel.js","original":{"line":13,"column":8}},{"name":"setText","generated":{"line":57,"column":11},"source":"ui/meanLabel.js","original":{"line":13,"column":13}},{"generated":{"line":57,"column":18},"source":"ui/meanLabel.js","original":{"line":13,"column":8}},{"name":"meanFormat","generated":{"line":57,"column":19},"source":"ui/meanLabel.js","original":{"line":13,"column":21}},{"generated":{"line":57,"column":29},"source":"ui/meanLabel.js","original":{"line":13,"column":31}},{"name":"mean","generated":{"line":57,"column":30},"source":"ui/meanLabel.js","original":{"line":13,"column":32}},{"generated":{"line":57,"column":34},"source":"ui/meanLabel.js","original":{"line":13,"column":31}},{"generated":{"line":57,"column":35},"source":"ui/meanLabel.js","original":{"line":13,"column":8}},{"generated":{"line":58,"column":0},"source":"ui/meanLabel.js","original":{"line":14,"column":5}},{"name":"Phaser","generated":{"line":62,"column":2},"source":"ui/meanLabel.js","original":{"line":5,"column":39}},{"name":"GameObjects","generated":{"line":62,"column":18},"source":"ui/meanLabel.js","original":{"line":5,"column":46}},{"generated":{"line":62,"column":29},"source":"ui/meanLabel.js","original":{"line":5,"column":39}},{"name":"Text","generated":{"line":62,"column":30},"source":"ui/meanLabel.js","original":{"line":5,"column":58}},{"generated":{"line":63,"column":0},"source":"ui/meanLabel.js","original":{"line":23,"column":0}},{"generated":{"line":64,"column":0},"source":"ui/meanLabel.js","original":{"line":24,"column":0}},{"generated":{"line":65,"column":0},"source":"ui/meanLabel.js","original":{"line":25,"column":0}},{"generated":{"line":66,"column":0},"source":"ui/meanLabel.js","original":{"line":26,"column":0}},{"generated":{"line":67,"column":0},"source":"ui/meanLabel.js","original":{"line":27,"column":0}}],"sources":{"ui/meanLabel.js":"import Phaser from 'phaser'\n\nconst meanFormat = (mean) => `Mean: ${mean}`\n\nexport default class meanLabel extends Phaser.GameObjects.Text{\n    constructor(scene, x, y, mean, style){\n        super(scene, x, y, mean, style)\n        this.mean = mean\n    }\n    \n    //Update mean value\n    updateMean(mean){\n        this.setText(meanFormat(mean))\n    }\n\n\n\n}\n\n\n\n\n/** \n * Because this extends the text class, I can only have six arguments. \n * Meaning, I need to calculate the mean value outside of this class\n * and then feed the value into here to dispaly/update the text onscreen.\n*/"},"lineCount":null}},"error":null,"hash":"b1158a5d1e07cc6791aabf1d30889492","cacheData":{"env":{}}}